
- macro: open_write
  condition: (evt.type=open or evt.type=openat) and evt.is_open_write=true and fd.typechar='f' and fd.num>=0

- macro: open_read
  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='f' and fd.num>=0

- macro: open_directory
  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='d' and fd.num>=0

- macro: never_true
  condition: (evt.num=0)

- macro: always_true
  condition: (evt.num>=0)

# In some cases, such as dropped system call events, information about
# the process name may be missing. For some rules that really depend
# on the identity of the process performing an action such as opening
# a file, etc., we require that the process name be known.

- list: sensitive_file_names
  items: [/etc/shadow, /etc/sudoers, /etc/pam.conf, /etc/security/pwquality.conf]

- list: sensitive_directory_names
  items: [/, /etc, /etc/, /root, /root/]

- macro: sensitive_files
  condition: >
    fd.name startswith /etc and
    (fd.name in (sensitive_file_names)
     or fd.directory in (/etc/sudoers.d, /etc/pam.d))

- macro: proc_name_exists
  condition: (proc.name!="<NA>")

- macro: rename
  condition: evt.type in (rename, renameat)
- macro: mkdir
  condition: evt.type in (mkdir, mkdirat)
- macro: remove
  condition: evt.type in (rmdir, unlink, unlinkat)

- macro: modify
  condition: rename or remove

- macro: spawned_process
  condition: evt.type = execve and evt.dir=<

- macro: create_symlink
  condition: evt.type in (symlink, symlinkat) and evt.dir=<

- macro: chmod
  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)

# File categories
- macro: bin_dir
  condition: fd.directory in (/bin, /sbin, /usr/bin, /usr/sbin)

- macro: bin_dir_mkdir
  condition: >
    (evt.arg[1] startswith /bin/ or
     evt.arg[1] startswith /sbin/ or
     evt.arg[1] startswith /usr/bin/ or
     evt.arg[1] startswith /usr/sbin/)

- macro: bin_dir_rename
  condition: >
    evt.arg[1] startswith /bin/ or
    evt.arg[1] startswith /sbin/ or
    evt.arg[1] startswith /usr/bin/ or
    evt.arg[1] startswith /usr/sbin/

- macro: etc_dir
  condition: fd.name startswith /etc/

# This detects writes immediately below / or any write anywhere below /root
- macro: root_dir
  condition: ((fd.directory=/ or fd.name startswith /root) and fd.name contains "/")

- list: shell_binaries
  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]

- list: ssh_binaries
  items: [
    sshd, sftp-server, ssh-agent,
    ssh, scp, sftp,
    ssh-keygen, ssh-keysign, ssh-keyscan, ssh-add
    ]

- list: shell_mgmt_binaries
  items: [add-shell, remove-shell]

- macro: shell_procs
  condition: proc.name in (shell_binaries)
- 

- list: ssh_files
  items: [/etc/ssh/sshd_config, /.ssh/authorized_keys]
  
#The given Falco rule is designed to detect any attempt to perform account manipulation using SSH.
#The rule is triggered when a process attempts to read or write files that are related to SSH.  
#The "condition" parameter of the rule uses the "open_read" and "open_write" system calls to monitor attempts to read from or write to files respectively.
#The "fd.name" parameter specifies the name of the files that should be monitored, which are related to SSH in this case.
#https://attack.mitre.org/techniques/T1098/
#Mitre Discovery: Account Manipulation subscenario

- rule: Account Manipulation in SSH
  desc: an attempt to do account manipulation using ssh

  condition: >
    ((open_read and (fd.name in (ssh_files)))
    or (open_write and (fd.name in (ssh_files))))
  enabled: true
  output: >
    A process with process id=%proc.pid is spawned to do account manipulation
    at ssh_files
  priority: ERROR
  tags: [host, container, account, mitre_discovery, account_manipulation, T1098]

#This is a Falco rule designed to detect attempts to access the bash history file on a Linux system. 
#The rule will trigger an alert if it detects an "openat" system call with a file descriptor (fd) that matches the path of the bash history file.
#The type of event must be an "openat" event, which means a file was opened using an absolute or relative path
#The path of the file being opened must match the path of the bash history file, which is typically located at "~/.bash_history"
#The file being opened must be in the list of unsecured files (unsec_file)
#https://attack.mitre.org/techniques/T1552/
#Mitre Credential Access : Unsecured credential access subscenario
  
- rule: Attempt to Access Bash History File
  desc: Someone is attempting to access the bash history file
  condition: evt.type = openat and fd.filename in (unsec_file)
  enabled: true
  output: "Access to bash history file (user=%user.name, command=%evt.arg.cmdline)"
  priority: CRITICAL
  tags: [host, container, bash, mitre_credential_accesss, unsecured_credential_access, T1552]

#This is a Falco rule that is designed to detect chown or chmod operations on a system.
#The rule looks for instances where the chown or chmod command is executed using the execve system call.
#The evt.type is set to execve, indicating that a process is being executed.
#The name of the process being executed matches either chown or chmod.
#https://attack.mitre.org/techniques/T1222/
#Mitre Defense Evasion: file and directory permission modification
  
- rule: Chown or Chmod Operation
  desc: Detects chown or chmod operations
  condition: (evt.type = execve and
              (proc.name = chown or proc.name = chmod))
  enabled: true
  output: "Chown or chmod operation detected
   (user=%user.name command=%proc.cmdline)"
  priority: WARNING
  tags: [host, container, permission, file, directory, mitre_defense_evasion, file_and_directory_permission_modification, T1222]

#This Falco rule is designed to detect attempts to create user accounts or add users to a system.
#A process has been spawned
#The name of the process matches one of the user management binaries listed in the configuration (user_mgmt_binaries)
#The process is not being executed within a container
#The command line used to execute the process is not excluded by the configuration 
#https://attack.mitre.org/techniques/T1136/
#Mitre Persistance: Create account subscenario

- rule: Create Account or Add User
  desc: >
    activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
    Activity in containers is also excluded--some containers create custom users on top
    of a base linux distribution at startup.
    Some innocuous command lines that don't actually change anything are excluded.
  condition: >
    spawned_process and proc.name in (user_mgmt_binaries)
  enabled: true
  output: >
    an user is added or a account is created to get persistance access of system
  priority: NOTICE
  tags: [host, container, user, account, mitre_persistance, create_account, T1136]#This Falco rule is designed to detect attempts to create user accounts or add users to a system.
#A process has been spawned
#The name of the process matches one of the user management binaries listed in the configuration (user_mgmt_binaries)
#The process is not being executed within a container
#The command line used to execute the process is not excluded by the configuration 
#https://attack.mitre.org/techniques/T1136/
#Mitre Persistance: Create account subscenario

- rule: Create Account or Add User
  desc: >
    activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
    Activity in containers is also excluded--some containers create custom users on top
    of a base linux distribution at startup.
    Some innocuous command lines that don't actually change anything are excluded.
  condition: >
    spawned_process and proc.name in (user_mgmt_binaries)
  enabled: true
  output: >
    an user is added or a account is created to get persistance access of system
  priority: NOTICE
  tags: [host, container, user, account, mitre_persistance, create_account, T1136]


#system, which can be a sign of an attacker attempting to steal credentials.
#The conditions for the rule to trigger are specified in the condition field, 
#which checks for any activity by programs that can manage users, passwords, or permissions. However, 
#the sudo and su programs are excluded from the rule, as they are legitimate tools that can be used for managing users and permissions.
#https://attack.mitre.org/techniques/T1555/
#Mitre Credential Access: Credential from password stores

- rule: Credentials From Password File
  desc: >
    activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
    Activity in containers is also excluded--some containers create custom users on top
    of a base linux distribution at startup.
    Some innocuous command lines that don't actually change anything are excluded.
  condition: >
    spawned_process and proc.name in (user_mgmt_binaries)
  enabled: true
  output: >
    An attempt is made to access password file present on system to get credential access
  priority: NOTICE
  tags: [host, container, credentials, mitre_credential_access, credentials_from_password_stores, T1555] 

- list: data_destruction_cmd
  items: ["shred", "dd", "wipe"]

- list: device_enumeration
  items: ["lsusb", "lspci", "dmesg", "lsblk", "lshw", "hwinfo"]
  
#This Falco rule detects if someone runs commands that enumerate peripheral devices.
# It does this by checking if a process is spawned and its name is in a predefined list of commands that enumerate peripheral devices, 
#or if its command line contains specific keywords such as "lsusb", "lspci", "dmesg", "lsblk", "lshw", or "hwinfo". If the condition is met, 
#the rule generates an alert with a warning priority indicating that a peripheral device enumeration command has been detected.
#https://attack.mitre.org/techniques/T1120/
#Mitre Discovery: Peripheral Device Discovery subscenario
  
- rule: Detect Peripheral Device Enumeration Commands
  desc: Detects if someone runs commands that enumerate peripheral devices.
  condition: >
    spawned_process and
    (
      proc.name in (device_enumeration) or
      proc.cmdline contains "lsusb" or
      proc.cmdline contains "lspci" or
      proc.cmdline contains "dmesg" or
      proc.cmdline contains "lsblk" or
      proc.cmdline contains "lshw" or
      proc.cmdline contains "hwinfo"
    )
  enabled: true
  output: >
    Peripheral device enumeration command detected.
  priority: WARNING
  tags: [host, container, device, hardware, mitre_discovery, peripheral_device_discovery, T1120]

#This is a Falco rule that is designed to detect when an attempt is made to read the maps file of a process.
#The maps file is a file that provides information about the memory mappings of a process.
#The open_read system call is used to read a file.
#The name of the file being read matches the glob pattern /proc/*/maps, which means that the file is located in, 
#the /proc directory and has a name that consists of a numerical process ID followed by the string "maps".
#https://attack.mitre.org/techniques/T1003/
#Mitre Credential Access: os credential dumping subscenario

- rule: Read Maps File of Process
  desc: An attempt to read the maps file of a process was detected
  condition: open_read and (fd.name glob /proc/*/maps)
  enabled: true
  output: Reading maps file of process
  priority: ERROR
  tags: [host, container, process, mitre_creential_access, os_credential_dumping, T1003]


#This Falco rule detects attempts to modify the authentication process by reading sensitive files that 
#contain user/password/authentication information by non-trusted programs. The condition checks for any read 
#operation on sensitive files by a process that is not a known trusted program. 
#https://attack.mitre.org/techniques/T1556/
#Mitre Credential Access: Modify Authentication Process  subscenario

- rule: Modify authentication process
  desc: >
    an attempt to read any sensitive file (e.g. files containing user/password/authentication
    information). Exceptions are made for known trusted programs.
  condition: >
    sensitive_files and open_read
    and proc_name_exists
  enabled: true
  output: >
    Sensitive file opened for reading by non-trusted program  to modify the authentication process
  priority: WARNING
  tags: [host, container]

#This falco rule detects an attempt to read sensitive files, 
#such as files containing user/password/authentication information, by a non-trusted program to discover information about the password policy of a system. 
#The condition for triggering the rule is that a sensitive file is being read in an open state by a process that is not a known trusted program.
#https://attack.mitre.org/techniques/T1201/
#Mitre Discovery: password policy discovery subscenario
 
- rule: Password Policy Discovery
  desc: >
    an attempt to read any sensitive file (e.g. files containing user/password/authentication
    information). Exceptions are made for known trusted programs.
  condition: >
    sensitive_files and open_read
    and proc_name_exists
  enabled: true
  output: >
    Sensitive file opened for reading by non-trusted program  to get information about set password policy of a system
  priority: WARNING
  tags: [host, container, authentication, mitre_discovery, password_policy_discovery, T1201]

- list: groups
  items: [/etc/group]
- list: critical_files
  items: [/etc/group, /etc/passwd, /etc/shadow, /etc/sudoers]
  
#This is a Falco rule that is designed to detect processes that attempt to discover the permissions of files and groups,
# including the group members. The rule looks for processes that read group files or attempt to get information about critical files.
#The open_read system call is used to read a file, and the name of the file matches one of the group files specified in the groups list.
#The evt.type is set to stat, indicating that a process is querying file metadata,
#and the name of the file being queried matches one of the critical files specified in the critical_files list.
#https://attack.mitre.org/techniques/T1069/
#Mitre Discovery: permission groups discovery

- rule: Permission and Group Members Discovery
  desc: rule to detect permission of files and group and its group members
  condition: >
    (open_read and (fd.name in (groups))) or
    (evt.type = stat and (fd.filename in (critical_files)))
  enabled: true
  output: suspicious process is spawwned to check file permissions
   and group members.
  priority: ERROR
  tags: [host, container, permission, group, mitre_discovery, permission_groups_discovery, T1069]

#This Falco rule is designed to detect the execution of commands that read disk blocks. 
#The rule starts by creating a list of commands that are known to read disk blocks, which includes dd, hdparm, readsector, and ddrescue
#https://attack.mitre.org/techniques/T1006/
#Mitre Defense evasion: direct volume acccess subscenarrio

- list: disk_read
  items: ['dd', 'hdparm', 'readsector', 'ddrescue']

- rule: Read Disk Block Command
  desc: Detects execution of commands that read disk blocks
  condition: >
    proc.name in (disk_read)
  enabled: true
  output: >
    Read disk block command detected (user=%user.name command=%proc.cmdline)
  priority: ERROR
  tags: [host, container, disk, mitre_defense_evasion, direct_volume_access, T1006]

#The following rule is designed to detect suspicious commands related to gathering system information.
#It uses the condition field to check if the command executed matches any of the suspicious commands such as dpkg -l, lsb_release -a, uname -r, or ls -l /usr/bin. 
#https://attack.mitre.org/techniques/T1518/
#Mitre Discovery: Software dicovery subsceanrio

- rule: Suspicious System Information Gathering
  desc: Detects suspicious commands related to gathering system information
  condition: >
    (proc.args contains "dpkg -l" or
     proc.args contains "lsb_release -a" or
     proc.args contains "uname -r" or
     proc.args contains "ls -l /usr/bin")
  enabled: true
  output: >
    Suspicious system information gathering detected (user=%user.name command=%proc.cmdline)
  priority: WARNING
  tags: [host, container, data, mitre_discovery, software_discovery, T1518]

- list: network_tools
  items: ["nmap", "ping", "dig", "nslookup", "arp"]
  
#This is a Falco rule that is designed to detect suspicious network scanning commands. 
#The rule looks for commands that are commonly used for network scanning activities 
#and have certain flags or arguments that suggest that the command is being used for malicious purposes.
#The name of the process matches one of several common network scanning tools, including nmap, ping, dig, nslookup, and arp.
#The command line arguments passed to the process contain one or more of the following flags or arguments:
#-sP: sends a Ping Scan to determine which hosts are online.
#-c: specifies the number of packets to send in a Ping or TCP SYN scan.
#+short: returns only the IP address for a DNS query instead of the full output.
#-a: performs a reverse DNS lookup to determine the hostname associated with an IP address.
#https://attack.mitre.org/techniques/T1018/
#Mitre Discovery: remote system discovery subscenario

- rule: Suspicious Network Scanning Command
  desc: Detects suspicious network scanning commands
  condition:
    (proc.name=nmap or proc.name=ping or proc.name=dig or
     proc.name=nslookup or proc.name=arp) and
    (
      proc.args contains "-sP" or
      proc.args contains "-c" or
      proc.args contains "+short" or
      proc.args contains "-a"
    )
  enabled: true
  output: Suspicious network scanning command executed
   (user=%user.name command=%proc.cmdline)
  priority: WARNING
  tags: [host, container, network, mitre_discovery, remote_system_discovery, T1018]

#This is a Falco rule designed to detect suspicious command execution related to time, date, and region information.
#The rule will trigger an alert if it detects the execution of certain commands that may be used to gather such information.
#The type of event must be an "execve" event, which means a process was executed
#The direction of the event must be "<", which means the process was executed by the shell (as opposed to being spawned by another process)
#The name of the process must match one of the following: "date", "timedatectl", "locale", or "hostnamectl"
#https://attack.mitre.org/techniques/T1124/
#Mitre Discovery: System time discovery subscenario
  
- rule: Suspicious Time and Date Command Execution
  desc: Detects the execution of commands that may be used to gather time, date, and region information
  condition: evt.type = execve and evt.dir = < and (proc.name = "date" or proc.name = "timedatectl" or proc.name = "locale" or proc.name = "hostnamectl")
  enabled: true
  output: "Suspicious time and date command executed: user=%user.name pid=%proc.pid ppid=%proc.ppid exe=%proc.exepath cmdline=%proc.cmdline"
  priority: WARNING
  tags: [host, container, time, date, mitre_discovery, system_time_discovery, T1124]

#The given falco rule detects attempts to retrieve system information by monitoring the execution of certain commands. 
#The rule checks if the event type is 'execve' and if the process name is one of the following: 'ip', 'cat', 'nmcli', 'iw', 'wpa_cli', 'geoiplookup', 'ifconfig', or 'hostname'
#https://attack.mitre.org/techniques/T1614/
#Mitre Discovery: system location discovery subscenario

- rule: Detect System Location Information Retrieval
  desc: Detects attempts to retrieve system information
  condition: >
   ( (evt.type=execve) and
     (
       proc.name in (ip, cat, nmcli, iw, wpa_cli, geoiplookup, ifconfig, hostname)
     )
    )
  enabled: true
  output: >
    System information may be retrieved (user=%user.name command=%proc.cmdline)
  priority: WARNING
  tags: [host, container, location, mitre_discovery, system_location_discovery, T1614]

- list: system_executables_files
  items: [/proc/filesystems, /proc/self/stat, /usr/lib/locale/locale-archive, /
  usr/bin/systemctl]
- list: system_executables_directories
  items: [/run/systemd/system, /etc/systemd/system-preset, /usr/lib/systemd/sys
tem-preset, /run/systemd/system-preset, /usr/local/lib/systemd/system-preset]


#The given Falco rule is designed to detect any attempt to discover all services running on a system. 
#The rule is triggered by a newly spawned process or by an attempt to read files from system executable directories or files.
#https://attack.mitre.org/techniques/T1007/
#Mitre Discovery: system service discovery subscenario

- rule: System Service Discovery
  desc: an attempt to discover all services that are running in system
  condition: >
    spawned_process
    or (open_read and (fd.directory in (system_executables_directories)) or
    (fd.filename in (system_executables_files)))
  enabled: false
  output: >
    A process with process id=%proc.pid is spawned to discover all the system
    system services present in the system.
  priority: ERROR
  tags: [host, container, process, mitre_discovery, system_service_discovery, T1007]
